@model WatchViewModel

@{
    ViewData["Title"] = $"Watch {Model.Movie.Title}";

    List<int?> BuildPages(int current, int total)
    {
        var list = new List<int?>();
        if (total <= 1) return list;

        int start = Math.Max(2, current - 2);
        int end = Math.Min(total - 1, current + 2);

        list.Add(1);
        if (start > 2) list.Add(null);

        for (int i = start; i <= end; i++) list.Add(i);

        if (end < total - 1) list.Add(null);
        if (total > 1) list.Add(total);

        return list.Distinct().ToList();
    }

    var totalPages = (int)Math.Ceiling((double)Model.CommentsCount / Model.CommentsPageSize);
    var current = 1;
    var pages = BuildPages(current, totalPages);
}

<section class="section section--head section--head-fixed section--gradient section--details-bg">
    <div class="section__bg" data-bg="@Model.Movie.BannerImageUrl" style="background: url(&quot;@Model.Movie.BannerImageUrl&quot;) center top / cover no-repeat;"></div>
    <div class="container">
        <!-- article -->
        <div class="article">
            <div class="row">
                <div class="col-12 col-xl-8">
                    <!-- trailer -->
                    <a href="@Model.Movie.TrailerVideoUrl" class="article__trailer open-video">
                        <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M11 1C16.5228 1 21 5.47716 21 11C21 16.5228 16.5228 21 11 21C5.47716 21 1 16.5228 1 11C1 5.47716 5.47716 1 11 1Z" stroke-linecap="round" stroke-linejoin="round"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M14.0501 11.4669C13.3211 12.2529 11.3371 13.5829 10.3221 14.0099C10.1601 14.0779 9.74711 14.2219 9.65811 14.2239C9.46911 14.2299 9.28711 14.1239 9.19911 13.9539C9.16511 13.8879 9.06511 13.4569 9.03311 13.2649C8.93811 12.6809 8.88911 11.7739 8.89011 10.8619C8.88911 9.90489 8.94211 8.95489 9.04811 8.37689C9.07611 8.22089 9.15811 7.86189 9.18211 7.80389C9.22711 7.69589 9.30911 7.61089 9.40811 7.55789C9.48411 7.51689 9.57111 7.49489 9.65811 7.49789C9.74711 7.49989 10.1091 7.62689 10.2331 7.67589C11.2111 8.05589 13.2801 9.43389 14.0401 10.2439C14.1081 10.3169 14.2951 10.5129 14.3261 10.5529C14.3971 10.6429 14.4321 10.7519 14.4321 10.8619C14.4321 10.9639 14.4011 11.0679 14.3371 11.1549C14.3041 11.1999 14.1131 11.3999 14.0501 11.4669Z" stroke-linecap="round" stroke-linejoin="round"></path></svg>
                        Trailer
                    </a>
                    <!-- end trailer -->
                    <!-- article content -->
                    <div class="article__content">
                        <h1>@Model.Movie.Title</h1>

                        <ul class="list">
                            <li><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22,9.67A1,1,0,0,0,21.14,9l-5.69-.83L12.9,3a1,1,0,0,0-1.8,0L8.55,8.16,2.86,9a1,1,0,0,0-.81.68,1,1,0,0,0,.25,1l4.13,4-1,5.68A1,1,0,0,0,6.9,21.44L12,18.77l5.1,2.67a.93.93,0,0,0,.46.12,1,1,0,0,0,.59-.19,1,1,0,0,0,.4-1l-1-5.68,4.13-4A1,1,0,0,0,22,9.67Zm-6.15,4a1,1,0,0,0-.29.88l.72,4.2-3.76-2a1.06,1.06,0,0,0-.94,0l-3.76,2,.72-4.2a1,1,0,0,0-.29-.88l-3-3,4.21-.61a1,1,0,0,0,.76-.55L12,5.7l1.88,3.82a1,1,0,0,0,.76.55l4.21.61Z" /></svg> @Model.Movie.Rating</li>
                            @foreach (var cat in Model.Movie.Categories)
                            {
                                <li>@cat</li>
                            }
                            <li>@Model.Movie.ReleaseYear</li>
                            <li>@(Model.Movie.Duration / 60 > 0 ? (Model.Movie.Duration % 60 > 0 ? $"{Model.Movie.Duration / 60} h {Model.Movie.Duration % 60} min" : $"{Model.Movie.Duration / 60} h") : $"{Model.Movie.Duration % 60} min")</li>
                            <li>@Model.Movie.AgeLimitation+</li>
                        </ul>

                        <p>@Model.Movie.Description</p>
                    </div>
                    <!-- end article content -->
                </div>

                <!-- video player -->
                <div class="col-12 col-xl-8">
                    @* FLIXTV (HLS) *@
                    @if (Model.Movie.SubtitleUrl != null)
                    {
                        <!-- praktik siqnal: FlixTV olanda subtitle var -->
                        <div class="media-block">
                            <!-- eyni boşluqlar üçün ümumi class -->
                            <video controls crossorigin="anonymous" id="player" src="@Model.Movie.SourceVideoUrl">
                                <track kind="captions" label="English" srclang="en" src="@Model.Movie.SubtitleUrl" default>
                            </video>
                        </div>
                    }
                    else
                    {
                        @* TMDB / iframe *@
                        <div class="iframe-player media-block">
                            <div class="iframe-wrap">
                                <iframe id="tmdbFrame"
                                        src="@Model.Movie.SourceVideoUrl"
                                        title="@Model.Movie.Title"
                                        allow="autoplay; encrypted-media; picture-in-picture; fullscreen"
                                        allowfullscreen
                                        referrerpolicy="no-referrer"
                                        loading="lazy"
                                        scrolling="no">
                                </iframe>
                            </div>
                        </div>
                    }

                </div>
                <!-- end video player -->

                <div class="col-12 col-xl-8">
                    <!-- categories -->
                    <div class="categories">
                        <h3 class="categories__title">Genres</h3>
                        @foreach (var cat in Model.Movie.Categories)
                        {
                            <a href="category.html" class="categories__item">@cat</a>
                        }
                    </div>
                    <!-- end categories -->
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-xl-8">
                    <!-- comments and reviews -->
                    <div class="comments">
                        <!-- tabs nav -->
                        <ul class="nav nav-tabs comments__title comments__title--tabs" id="comments__tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" data-toggle="tab" href="#tab-1" role="tab" aria-controls="tab-1" aria-selected="true">
                                    <h4>Comments</h4>
                                    <span id="commentsCount">@Model.CommentsCount</span>
                                </a>
                            </li>

                            <li class="nav-item">
                                <a class="nav-link" data-toggle="tab" href="#tab-2" role="tab" aria-controls="tab-2" aria-selected="false">
                                    <h4>Reviews</h4>
                                    <span id="reviewsCount">@Model.ReviewsCount</span>
                                </a>
                            </li>
                        </ul>
                        <!-- end tabs nav -->
                        <!-- tabs -->
                        <div class="tab-content">
                            <!-- comments -->
                            <div class="tab-pane fade show active" id="tab-1" role="tabpanel">
                                <div id="commentsContainer" data-movie-id="@Model.Movie.Id" data-page-size="@Model.CommentsPageSize">
                                    @await Html.PartialAsync("_MovieComments", new MovieCommentsPartialViewModel {
                                    MovieId = Model.Movie.Id,
                                                                        TotalCount = Model.CommentsCount,
                                                                        Comments = Model.Comments,
                                                                        Page = Model.CommentsPage,
                                                                        PageSize = Model.CommentsPageSize
                                                                        })
                                </div>

                                @if (User.Identity.IsAuthenticated)
                                {
                                    <form id="addCommentForm" class="comments__form">
                                        @Html.AntiForgeryToken()
                                        <div class="sign__group">
                                            <!-- NEW: maxlength və data-max -->
                                            <textarea id="text" name="text" class="sign__textarea"
                                                  placeholder="Add comment"
                                                  maxlength="1000" data-max="1000"></textarea>
                                        </div>
                                        <button id="addCommentBtn" type="submit" class="sign__btn" disabled>Send</button>
                                    </form>
                                }
                            </div>
                            <!-- end comments -->
                            <!-- reviews -->
                            <div class="tab-pane fade" id="tab-2" role="tabpanel">
                                <div id="reviewsContainer"
                                     data-movie-id="@Model.Movie.Id"
                                     data-page-size="@Model.ReviewsPageSize">
                                    @await Html.PartialAsync("_MovieReviews", new MovieReviewsPartialViewModel {
                                        MovieId = Model.Movie.Id,
                                        TotalCount = Model.ReviewsCount,
                                        Reviews = Model.Reviews,
                                        Page = Model.ReviewsPage,
                                        PageSize = Model.ReviewsPageSize
                                    })
                                </div>

                                @if (User.Identity.IsAuthenticated && Model.CanAddReview)
                                {
                                    <form id="addReviewForm" class="reviews__form">
                                        @Html.AntiForgeryToken()
                                        <div class="row">
                                            <div class="col-12 col-md-9 col-lg-10 col-xl-9">
                                                <div class="sign__group">
                                                    <input type="text" id="reviewTitle" name="title" class="sign__input" placeholder="Title" maxlength="100" />
                                                </div>
                                            </div>

                                            <div class="col-12 col-md-3 col-lg-2 col-xl-3">
                                                <div class="sign__group">
                                                    <select id="reviewRating" name="rating" class="sign__select">
                                                        <option value="">Rating</option>
                                                        @for (int i = 10; i >= 1; i--)
                                                        {
                                                            <option value="@i">@i</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="col-12">
                                                <div class="sign__group">
                                                    <textarea id="reviewMessage" name="message" class="sign__textarea" placeholder="Add review" maxlength="1000"></textarea>
                                                </div>
                                            </div>

                                            <div class="col-12">
                                                <button id="addReviewBtn" type="submit" class="sign__btn" disabled>SEND</button>
                                            </div>
                                        </div>
                                    </form>
                                }
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <script type="text/template" id="tpl-add-review">
                                        <form id="addReviewForm" class="reviews__form">
                                            @Html.AntiForgeryToken()
                                            <div class="row">
                                                <div class="col-12 col-md-9 col-lg-10 col-xl-9">
                                                    <div class="sign__group">
                                                        <input type="text" id="reviewTitle" name="title" class="sign__input" placeholder="Title" maxlength="100" />
                                                    </div>
                                                </div>
                                                <div class="col-12 col-md-3 col-lg-2 col-xl-3">
                                                    <div class="sign__group">
                                                        <select id="reviewRating" name="rating" class="sign__select">
                                                            <option value="">Rating</option>
                                                            @for (int i = 10; i >= 1; i--)
                                                            {
                                                                <option value="@i">@i</option>
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-12">
                                                    <div class="sign__group">
                                                        <textarea id="reviewMessage" name="message" class="sign__textarea" placeholder="Add review" maxlength="1000"></textarea>
                                                    </div>
                                                </div>
                                                <div class="col-12">
                                                    <button id="addReviewBtn" type="submit" class="sign__btn" disabled>SEND</button>
                                                </div>
                                            </div>
                                        </form>
                                    </script>
                                }
                            </div>
                            <!-- end reviews -->
                        </div>
                        <!-- end tabs -->
                    </div>
                    <!-- end comments and reviews -->
                </div>

                <div class="col-12 col-xl-4">
                    @if (Model.NewItems != null && Model.NewItems.Count > 0)
                    {
                        <div class="row row--grid">
                            <div class="col-12">
                                <h5 class="sidebar__title">New items</h5>
                            </div>

                            @foreach (var m in Model.NewItems)
                            {
                                <div class="col-6 col-sm-4 col-md-3 col-xl-6">
                                    <div class="card">
                                        <a asp-controller="Movies" asp-action="Watch" asp-route-id="@m.Id" class="card__cover">
                                            <img src="@m.CoverImageUrl" alt="">
                                            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M11 1C16.5228 1 21 5.47716 21 11C21 16.5228 16.5228 21 11 21C5.47716 21 1 16.5228 1 11C1 5.47716 5.47716 1 11 1Z" stroke-linecap="round" stroke-linejoin="round" /><path fill-rule="evenodd" clip-rule="evenodd" d="M14.0501 11.4669C13.3211 12.2529 11.3371 13.5829 10.3221 14.0099C10.1601 14.0779 9.74711 14.2219 9.65811 14.2239C9.46911 14.2299 9.28711 14.1239 9.19911 13.9539C9.16511 13.8879 9.06511 13.4569 9.03311 13.2649C8.93811 12.6809 8.88911 11.7739 8.89011 10.8619C8.88911 9.90489 8.94211 8.95489 9.04811 8.37689C9.07611 8.22089 9.15811 7.86189 9.18211 7.80389C9.22711 7.69589 9.30911 7.61089 9.40811 7.55789C9.48411 7.51689 9.57111 7.49489 9.65811 7.49789C9.74711 7.49989 10.1091 7.62689 10.2331 7.67589C11.2111 8.05589 13.2801 9.43389 14.0401 10.2439C14.1081 10.3169 14.2951 10.5129 14.3261 10.5529C14.3971 10.6429 14.4321 10.7519 14.4321 10.8619C14.4321 10.9639 14.4011 11.0679 14.3371 11.1549C14.3041 11.1999 14.1131 11.3999 14.0501 11.4669Z" stroke-linecap="round" stroke-linejoin="round" /></svg>
                                        </a>

                                        <button class="card__add js-fav-btn @(m.IsFavourite ? "active" : "")" type="button" data-movie-id="@m.Id" aria-pressed="@(m.IsFavourite.ToString().ToLower())">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M16,2H8A3,3,0,0,0,5,5V21a1,1,0,0,0,.5.87,1,1,0,0,0,1,0L12,18.69l5.5,3.18A1,1,0,0,0,18,22a1,1,0,0,0,.5-.13A1,1,0,0,0,19,21V5A3,3,0,0,0,16,2Zm1,17.27-4.5-2.6a1,1,0,0,0-1,0L7,19.27V5A1,1,0,0,1,8,4h8a1,1,0,0,1,1,1Z" /></svg>
                                        </button>

                                        <span class="card__rating">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22,9.67A1,1,0,0,0,21.14,9l-5.69-.83L12.9,3a1,1,0,0,0-1.8,0L8.55,8.16,2.86,9a1,1,0,0,0-.81.68,1,1,0,0,0,.25,1l4.13,4-1,5.68A1,1,0,0,0,6.9,21.44L12,18.77l5.1,2.67a.93.93,0,0,0,.46.12,1,1,0,0,0,.59-.19,1,1,0,0,0,.4-1l-1-5.68,4.13-4A1,1,0,0,0,22,9.67Z" /></svg>
                                            @m.Rating
                                        </span>

                                        <h3 class="card__title">
                                            <a asp-controller="Movies" asp-action="Watch" asp-route-id="@m.Id">@m.Title</a>
                                        </h3>

                                        <ul class="card__list">
                                            @foreach (var c in m.Categories.Take(1))
                                            {
                                                <li>@c</li>
                                            }
                                            <li>@m.ReleaseYear</li>
                                        </ul>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    </div>
                </div>
            </div>
        </div>
        <!-- end article -->
    </div>
</section>
<!-- end details -->
<!-- similar -->
@if (Model.SimiliarMovies is not null && Model.SimiliarMovies.Count > 0)
{
    <section class="section">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <h2 class="section__title"><a href="category.html">Similar movies</a></h2>
                </div>

                <div class="col-12">
                    <div class="section__carousel-wrap">
                        <div class="section__carousel owl-carousel" id="similiar_@Model.Movie.Id">
                            @foreach (var movie in Model.SimiliarMovies)
                            {
                                <div class="card">
                                    <a asp-controller="Movies" asp-action="Watch" asp-route-id="@movie.Id" class="card__cover">
                                        <img src="@movie.CoverImageUrl" alt="">
                                        <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M11 1C16.5228 1 21 5.47716 21 11C21 16.5228 16.5228 21 11 21C5.47716 21 1 16.5228 1 11C1 5.47716 5.47716 1 11 1Z" stroke-linecap="round" stroke-linejoin="round" /><path fill-rule="evenodd" clip-rule="evenodd" d="M14.0501 11.4669C13.3211 12.2529 11.3371 13.5829 10.3221 14.0099C10.1601 14.0779 9.74711 14.2219 9.65811 14.2239C9.46911 14.2299 9.28711 14.1239 9.19911 13.9539C9.16511 13.8879 9.06511 13.4569 9.03311 13.2649C8.93811 12.6809 8.88911 11.7739 8.89011 10.8619C8.88911 9.90489 8.94211 8.95489 9.04811 8.37689C9.07611 8.22089 9.15811 7.86189 9.18211 7.80389C9.22711 7.69589 9.30911 7.61089 9.40811 7.55789C9.48411 7.51689 9.57111 7.49489 9.65811 7.49789C9.74711 7.49989 10.1091 7.62689 10.2331 7.67589C11.2111 8.05589 13.2801 9.43389 14.0401 10.2439C14.1081 10.3169 14.2951 10.5129 14.3261 10.5529C14.3971 10.6429 14.4321 10.7519 14.4321 10.8619C14.4321 10.9639 14.4011 11.0679 14.3371 11.1549C14.3041 11.1999 14.1131 11.3999 14.0501 11.4669Z" stroke-linecap="round" stroke-linejoin="round" /></svg>
                                    </a>
                                    <button class="card__add js-fav-btn @(movie.IsFavourite ? "active" : "")" type="button" data-movie-id="@movie.Id" aria-pressed="@(movie.IsFavourite.ToString().ToLower())">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M16,2H8A3,3,0,0,0,5,5V21a1,1,0,0,0,.5.87,1,1,0,0,0,1,0L12,18.69l5.5,3.18A1,1,0,0,0,18,22a1,1,0,0,0,.5-.13A1,1,0,0,0,19,21V5A3,3,0,0,0,16,2Zm1,17.27-4.5-2.6a1,1,0,0,0-1,0L7,19.27V5A1,1,0,0,1,8,4h8a1,1,0,0,1,1,1Z" /></svg>
                                    </button>
                                    <span class="card__rating"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22,9.67A1,1,0,0,0,21.14,9l-5.69-.83L12.9,3a1,1,0,0,0-1.8,0L8.55,8.16,2.86,9a1,1,0,0,0-.81.68,1,1,0,0,0,.25,1l4.13,4-1,5.68A1,1,0,0,0,6.9,21.44L12,18.77l5.1,2.67a.93.93,0,0,0,.46.12,1,1,0,0,0,.59-.19,1,1,0,0,0,.4-1l-1-5.68,4.13-4A1,1,0,0,0,22,9.67Zm-6.15,4a1,1,0,0,0-.29.88l.72,4.2-3.76-2a1.06,1.06,0,0,0-.94,0l-3.76,2,.72-4.2a1,1,0,0,0-.29-.88l-3-3,4.21-.61a1,1,0,0,0,.76-.55L12,5.7l1.88,3.82a1,1,0,0,0,.76.55l4.21.61Z" /></svg> @movie.Rating</span>
                                    <h3 class="card__title"><a asp-controller="Movies" asp-action="Watch" asp-route-id="@movie.Id">@movie.Title</a></h3>
                                    <ul class="card__list">
                                        @foreach (var cat in movie.Categories)
                                        {
                                            <li>@cat</li>
                                        }
                                        <li>@movie.ReleaseYear</li>
                                    </ul>
                                </div>
                            }
                            @if (Model.SimiliarMovies.Count < 8)
                            {
                                @for (int i = 0; i < 8 - Model.SimiliarMovies.Count; i++)
                                {
                                    <div class="card" style="visibility: hidden">
                                        <a href="" class="card__cover">
                                            <img>
                                        </a>
                                    </div>
                                }
                            }
                        </div>
                        @if (Model.SimiliarMovies.Count >= 8)
                        {
                            <button class="section__nav section__nav--cards section__nav--prev" data-nav="#similiar_@Model.Movie.Id" type="button"><svg width="17" height="15" viewBox="0 0 17 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.25 7.72559L16.25 7.72559" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" /><path d="M7.2998 1.70124L1.2498 7.72524L7.2998 13.7502" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" /></svg></button>
                            <button class="section__nav section__nav--cards section__nav--next" data-nav="#similiar_@Model.Movie.Id" type="button"><svg width="17" height="15" viewBox="0 0 17 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15.75 7.72559L0.75 7.72559" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" /><path d="M9.7002 1.70124L15.7502 7.72524L9.7002 13.7502" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" /></svg></button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}


<div id="modal-delete" class="zoom-anim-dialog mfp-hide modal">
    <h6 class="modal__title">Comment delete</h6>
    <p class="modal__text">Are you sure to permanently delete this comment?</p>
    <div class="modal__btns">
        <button id="confirmDeleteComment" class="modal__btn modal__btn--apply" type="button">Delete</button>
        <button class="modal__btn modal__btn--dismiss" type="button">Dismiss</button>
    </div>
</div>

@section Scripts {

    @if (Model.Movie.SourceType == SourceType.FlixTv)
    {
        <script>
            addEventListener("DOMContentLoaded", () => {
                var player;
                var source = "@Model.Movie.SourceVideoUrl";
                const video = document.getElementById("player");

                const resumeAt = Math.max(0, @Model.Movie.LastPositionSeconds);

                // Yüklənən kimi qaldığı yerə atla (metadata hazır olanda işləyir)
                function seekToResume() {
                  // duration-dan 2s əvvəl dayanıbsa, son 2 saniyəyə ilişməsin deyə bir az geriyə çəkirik
                  const d = Math.floor(video.duration || 0);
                  const s = Math.min(resumeAt, Math.max(0, d - 2));
                  if (s > 0 && Math.abs((video.currentTime || 0) - s) > 0.5) {
                    try { video.currentTime = s; } catch {}
                  }
                }

                video.addEventListener('loadedmetadata', () => setTimeout(seekToResume, 0));

                const movieId = @Model.Movie.Id;
                let playedSeconds = new Set();   // session ərzində unikal saniyələr
                let maxPos = 0;                  // görülmüş ən uzaq saniyə
                let sent = false;                // göndərildi-mi?
                let isSeeking = false;           // seek zamanı saniyə toplama

                function nowSec() {
                  return Math.floor(video.currentTime || 0);
                }

                function onTimeUpdate() {
                  const s = nowSec();
                  if (!video.paused && !video.ended && !isSeeking) {
                    playedSeconds.add(s);        // unikal saniyə
                  }
                  if (s > maxPos) maxPos = s;    // maksimum mövqe
                }

                video.addEventListener('timeupdate', onTimeUpdate);
                video.addEventListener('seeking', () => { isSeeking = true; });
                video.addEventListener('seeked',  () => { isSeeking = false; });
                // Tam bitəndə dərhal göndər
                video.addEventListener('ended', sendViewDataBeacon);

                function buildPayload() {
                  const last = nowSec();
                  return {
                    movieId: movieId,
                    lastPositionSeconds: last,
                    maxPositionSeconds: Math.max(maxPos, last),
                    watchedSeconds: playedSeconds.size
                  };
                }

                function sendViewDataBeacon() {
                  if (sent) return; // page unload üçün birdəfəlik
                  sent = true;

                  const url = '@Url.Action("Create", "ViewDatas")';
                  const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';

                  const data = buildPayload();

                  // sendBeacon üçün FormData ən stabil yoldur
                  const fd = new FormData();
                  if (token) fd.append('__RequestVerificationToken', token);
                  fd.append('movieId',              String(data.movieId));
                  fd.append('lastPositionSeconds',  String(data.lastPositionSeconds));
                  fd.append('maxPositionSeconds',   String(data.maxPositionSeconds));
                  fd.append('watchedSeconds',       String(data.watchedSeconds));

                  // Beacon – səhifədən çıxarkən etibarlı işləyir
                  if (!navigator.sendBeacon || !navigator.sendBeacon(url, fd)) {
                    // Fallback – normal POST (artıq unload-da həmişə işləmir, amma cəhd edirik)
                    fetch(url, { method: 'POST', body: fd, credentials: 'same-origin' }).catch(()=>{});
                  }
                }

                // Səhifədən çıxış üçün güvənilən event-lər
                window.addEventListener('pagehide', sendViewDataBeacon, { capture: true });
                window.addEventListener('beforeunload', sendViewDataBeacon, { capture: true });


                const defaultOptions = {};

                if (!Hls.isSupported()) {
                    video.src = source;
                    return;
                }

                const hls = new Hls();
                hls.loadSource(source);

                hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {

                    const aviableQualities = hls.levels.map(l => l.height).sort((a, b) => b - a)
                    aviableQualities.unshift(0)
                    defaultOptions.controls = [
                        'play-large',
                        'play',
                        'progress',
                        'current-time',
                        'duration',
                        'mute',
                        'volume',
                        'captions',
                        'settings',
                        'fullscreen',
                    ];

                    defaultOptions.captions = {
                        active: true,
                        update: true,
                        language: 'en'
                    };

                    defaultOptions.quality = {
                        default: 0,
                        options: aviableQualities,
                        forced: true,
                        onChange: (e) => updateQuality(e)
                    }

                    defaultOptions.i18n = {
                        qualityLabel: {
                            0: "Auto",
                        },
                    }

                    player = new Plyr(video, defaultOptions);

                    if (video.readyState >= 1) seekToResume();

                });

                hls.attachMedia(video);
                window.hls = hls;

                function updateQuality(newQuality) {
                    if (newQuality === 0) {
                        window.hls.currentLevel    = -1;
                    }
                    else {
                        window.hls.levels.forEach((level, levelIndex) => {
                            if(level.height === newQuality){
                                window.hls.currentLevel = levelIndex;
                            }
                        })
                    }
                }
            });
        </script>
    }
    else if (Model.Movie.SourceType == SourceType.Tmdb)
    {
        <script>
            addEventListener('DOMContentLoaded', () => {
              const iframe = document.getElementById('tmdbFrame');
              if (!iframe) return;

              const MOVIE_ID = @Model.Movie.Id;
              const POST_URL = '@Url.Action("Create", "ViewDatas")';
              const TOKEN    = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
              const TICK_MS  = 1000;   // saniyə sayğacı
              const MIN_SEND = 120;    // 120 san. altını göndərmirik

              let pageVisible = !document.hidden;
              let inViewport  = true;
              let pendingSec  = 0;
              let sendOnce    = false; // dublikatların qarşısı

              // Görünmə payı (25%-dən çox olanda say)
              const io = new IntersectionObserver((entries) => {
                for (const e of entries) {
                  if (e.target === iframe) inViewport = e.isIntersecting && e.intersectionRatio >= 0.25;
                }
              }, { threshold: [0, 0.25, 0.5, 0.75, 1] });
              io.observe(iframe);

              document.addEventListener('visibilitychange', () => {
                pageVisible = !document.hidden;
                if (!pageVisible) flush('hidden');
              });

              // Saniyəlik sayğac — heç bir ping YOXDUR
              setInterval(() => {
                if (pageVisible && inViewport) pendingSec += 1;
              }, TICK_MS);

              // Səhifədən çıxış
              window.addEventListener('pagehide',     () => flush('pagehide'),     { capture:true });
              window.addEventListener('beforeunload', () => flush('beforeunload'), { capture:true });

              function flush(reason){
                if (sendOnce) return;
                if (pendingSec < MIN_SEND) return;  // 120 saniyədən azsa göndərmə
                sendOnce = true;

                const fd = new FormData();
                if (TOKEN) fd.append('__RequestVerificationToken', TOKEN);
                fd.append('movieId', String(MOVIE_ID));
                fd.append('lastPositionSeconds', '0'); // iframe-də mövqe yoxdur
                fd.append('maxPositionSeconds',  '0');
                fd.append('watchedSeconds',      String(pendingSec));

                // unload-da işləsin deyə keepalive + antiforgery header
                fetch(POST_URL, {
                  method: 'POST',
                  body: fd,
                  credentials: 'same-origin',
                  headers: TOKEN ? { 'RequestVerificationToken': TOKEN } : {},
                  keepalive: true
                }).catch(()=>{});
              }
            });
        </script>
    }
    <script>
        function scrollToBlockTop($wrap){
          var headerH = $('header.header').outerHeight() || 0;
          var top = Math.max(0, $wrap.offset().top - headerH*2);
          $('html, body').stop(true).animate({ scrollTop: top }, 350, 'swing');
        }


              function formatInTz(dt, tz) {
          const parts = new Intl.DateTimeFormat(undefined, {
            timeZone: tz, year:'numeric', month:'2-digit', day:'2-digit',
            hour:'2-digit', minute:'2-digit', hour12:false
          }).formatToParts(dt);
          const get = t => parts.find(p => p.type===t)?.value || '';
          return `${get('day')}.${get('month')}.${get('year')}, ${get('hour')}:${get('minute')}`;
        }

        // Safari ehtiyatı (7 rəqəmli ms → 3 rəqəm)
        function parseISO(iso){
          const trimmed = iso.replace(/\.(\d{3})\d+Z$/, '.$1Z');
          const d = new Date(trimmed);
          return isNaN(d) ? new Date(iso) : d;
        }

        function localizeTimes(root){
          const elRoot = root && root.jquery ? root[0] : (root || document);
          const nodes = elRoot.querySelectorAll('time.js-local-time[datetime]');
          const tz = (window.__forceTz) || Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC';

          nodes.forEach(el => {
            // 1) Ən etibarlı: epoch ms
            const ms = el.getAttribute('data-utc');
            let dt = ms ? new Date(parseInt(ms,10)) : null;

            // 2) Yoxdursa, datetime ISO-dan
            if (!dt || isNaN(dt)) {
              const iso = el.getAttribute('datetime');
              if (!iso) return;
              dt = parseISO(iso);
            }
            if (isNaN(dt)) return;

            const text = formatInTz(dt, tz);
            el.textContent = text;
            el.title = `UTC: ${dt.toISOString()} · ${tz}: ${text}`;
          });
        }

        document.addEventListener('DOMContentLoaded', () => localizeTimes());
    </script>
    <script>
        // MVC endpoint
        const reactUrl = '@Url.Action("React", "Comments")';

        function clamp(n){ return Math.max(0, n|0); }

        // Serverdən gələn final state-i elementə tətbiq et
        function applyServerState($item, s){
          $item.find('.js-like-count').text(s.likeCount);
          $item.find('.js-dislike-count').text(s.dislikeCount);
          $item.find('.js-like').toggleClass('active', !!s.hasLiked);
          $item.find('.js-dislike').toggleClass('active', !!s.hasDisliked);
        }

        // Optimistic dəyişiklik: like və dislike bir-birini söndürür
        function optimistic($item, type){
          const $likeBtn = $item.find('.js-like');
          const $disBtn  = $item.find('.js-dislike');
          const $lCnt    = $item.find('.js-like-count');
          const $dCnt    = $item.find('.js-dislike-count');

          let like  = parseInt($lCnt.text()||'0',10);
          let dlike = parseInt($dCnt.text()||'0',10);
          const liked    = $likeBtn.hasClass('active');
          const disliked = $disBtn.hasClass('active');

          if (type==='like'){
            if (liked){
              like = clamp(like-1);
              $likeBtn.removeClass('active');
            } else {
              like = like+1;
              $likeBtn.addClass('active');
              if (disliked){
                dlike = clamp(dlike-1);
                $disBtn.removeClass('active');
              }
            }
          } else { // dislike
            if (disliked){
              dlike = clamp(dlike-1);
              $disBtn.removeClass('active');
            } else {
              dlike = dlike+1;
              $disBtn.addClass('active');
              if (liked){
                like = clamp(like-1);
                $likeBtn.removeClass('active');
              }
            }
          }
          $lCnt.text(like);
          $dCnt.text(dlike);
        }

        // Like
        $(document).on('click','.js-like',function(e){
          e.preventDefault();
          const $btn  = $(this);
          const $item = $btn.closest('.comments__item');
          if ($btn.data('busy')) return;
          $btn.data('busy', true);

          const id = $btn.data('comment-id');
          const wasLiked = $btn.hasClass('active');
          const action   = wasLiked ? 'unlike' : 'like';

          // Optimistic UI
          optimistic($item,'like');

          $.post(reactUrl, { id:id, action:action })
            .done(function(res){
              if (res && res.success) applyServerState($item, res);
              else optimistic($item,'like'); // rollback
            })
            .fail(function(xhr){
              optimistic($item,'like'); // rollback
              if (xhr.status === 401) {
                // istəyə görə yönləndirə bilərsən
                // window.location = '/Account/Login?returnUrl=' + encodeURIComponent(location.href);
              }
            })
            .always(function(){ $btn.data('busy', false); });
        });

        // Dislike
        $(document).on('click','.js-dislike',function(e){
          e.preventDefault();
          const $btn  = $(this);
          const $item = $btn.closest('.comments__item');
          if ($btn.data('busy')) return;
          $btn.data('busy', true);

          const id = $btn.data('comment-id');
          const wasDisliked = $btn.hasClass('active');
          const action      = wasDisliked ? 'undislike' : 'dislike';

          optimistic($item,'dislike');

          $.post(reactUrl, { id:id, action:action })
            .done(function(res){
              if (res && res.success) applyServerState($item, res);
              else optimistic($item,'dislike'); // rollback
            })
            .fail(function(xhr){
              optimistic($item,'dislike'); // rollback
            })
            .always(function(){ $btn.data('busy', false); });
        });

        // (Antiforgery istifadə edirsinizsə) _Layout-da @Html.AntiForgeryToken() qoyun və:
        // $.ajaxSetup({ headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() }});
    </script>
    <script>
        // Bütün AJAX-lara header-lar
        $.ajaxSetup({
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // AddComment formundakı token
          }
        });

        const createUrl = '@Url.Action("Create", "Comments")';
        const listUrl   = '@Url.Action("MovieComments", "Movies")';

        // Partial yüklənəndən sonra başlıqdakı sayını yenilə
        function afterPartialLoaded(){
          var total = $('#commentsContainer').find('#js-comments-total').val();
          if (total) $('#commentsCount').text(total);
          localizeTimes(document.getElementById('commentsContainer'));
        }

        // Paginator klikləri – SADECE bu hissəni dəyiş: partial yüklənəndən sonra afterPartialLoaded çağır
        $(document).off('click', '.js-comments-pager a')
                       .on('click', '.js-comments-pager a', function (e) {
          e.preventDefault();

          var url   = $(this).attr('href');
          var $wrap = $('#commentsContainer');

          // loading görünüşü
          var prevHeight = $wrap.height();
          $wrap.css({ minHeight: prevHeight }).addClass('loading');

          // Smooth scroll – fixed header offset-lə
          var $header = $('header.header');
          var headerH  = $header.outerHeight();

        var top = Math.max(0, $wrap.offset().top - headerH*2);
        $('html, body').stop(true).animate({ scrollTop: top }, 350, 'swing');

          // Partial yüklə
          $wrap.load(url, function () {
            $wrap.removeClass('loading').css({ minHeight: '' });
            afterPartialLoaded();

            // A11y: ilk kommentə fokus (istəyə bağlı)
            var $first = $wrap.find('.comments__item').first();
            if ($first.length) $first.attr('tabindex','-1').focus();
          });
        });

        // Add Comment – yalnız auth üçün form görünür
                $('#addCommentForm').on('submit', function(e){
          e.preventDefault();
          var $btn = $('#addCommentBtn');
          var text = $('#text').val().trim();
          if (text.length < 2) return;

          var $wrap    = $('#commentsContainer');
          var movieId  = $wrap.data('movie-id');
          var pageSize = $wrap.data('page-size');

          $btn.prop('disabled', true).text('Sending...');

          $.post(createUrl, { movieId: movieId, text: text })
            .done(function(){
              $('#text').val('');

              // 1) əvvəlcə komment blokunun üstünə apar
              scrollToBlockTop($wrap);

              // 2) 1-ci səhifəni yüklə (loading state optional)
              var reloadUrl = listUrl + '?movieId=' + movieId + '&page=1&pageSize=' + pageSize;
              var prevH = $wrap.height();
              $wrap.css({ minHeight: prevH }).addClass('loading');

              $wrap.load(reloadUrl, function(){
                $wrap.removeClass('loading').css({ minHeight: '' });
                afterPartialLoaded();

                // 3) layout dəyişəndən sonra bir dəfə də üstə apar (dəqiq olsun)
                scrollToBlockTop($wrap);

                // (istəyə görə) ilk kommentə fokus
                var $first = $wrap.find('.comments__item').first();
                if ($first.length) $first.attr('tabindex','-1').focus();
              });
            })
            .fail(function(xhr){
              if (xhr.status === 401) {
                window.location = '@Url.Action("Signin", "Account")' + '?returnUrl=' + encodeURIComponent(location.href);
              } else {
                alert('Failed to add comment.');
              }
            })
            .always(function(){
              $btn.prop('disabled', false).text('Send');
            });
        });

        (function(){
          const $btn  = $('#addCommentBtn');
          const $txt  = $('#text');
          const $left = $('#leftCount');
          const MAX   = parseInt($txt.attr('maxlength') || $txt.data('max') || 1000, 10);

          // Düymənin state-i və sayğac
          function updateControls(){
            const val = $txt.val();
            const len = val.length;
            const hasMeaningfulText = val.trim().length > 0;
            const left = Math.max(0, MAX - len);

            $left.text(left);
            $btn.prop('disabled', !hasMeaningfulText || len === 0);
          }

          // Limitə çatanda yalnız silməyə icazə ver (insert cəhdlərini blokla)
          // (maxlength artıq kifayətdir, bu isə əlavə "sərt" qoruma)
          const el = document.getElementById('text');
          el.addEventListener('beforeinput', function(ev){
            // selection uzunluğu: əgər istifadəçi seçilmiş mətni əvəzləyirsə, icazə verək
            const selection = this.selectionEnd - this.selectionStart;
            const curLen    = this.value.length;
            const willExceed = curLen - selection >= MAX;

            // insert* əməliyyatlarını limitdə blokla (silmək, kəsmək və s. normal işləsin)
            if (ev.inputType && ev.inputType.startsWith('insert') && willExceed) {
              ev.preventDefault();
            }
          });

          // Paste zamanı əlavə sığortalama (maxlength truncat etsə də)
          el.addEventListener('input', function(){
            if (this.value.length > MAX) this.value = this.value.substring(0, MAX);
            updateControls();
          });

          // İlk yüklənmədə və yazdıqca yenilə
          $(document).on('input', '#text', updateControls);
          updateControls();

          // Mövcud submit AJAX-ınız qalır — yalnız göndərmədən əvvəl bir də yoxla
          $('#addCommentForm').on('submit', function(e){
            const val = $txt.val().trim();
            if (val.length === 0 || val.length > MAX) {
              e.preventDefault();
              return;
            }
            // Buradan aşağı sənin mövcud $.post(...) kodun işləyir
            // (submit handler-ın içində artıq var)
          });
        })();
    </script>
    <script>
        // ---- REVIEWS (AJAX) ----
        const reviewsCreateUrl = '@Url.Action("Create", "Reviews")';
        const reviewsListUrl   = '@Url.Action("MovieReviews", "Movies")';

        function afterReviewsPartialLoaded(){
          var total = $('#reviewsContainer').find('#js-reviews-total').val();
          if (total) $('#reviewsCount').text(total);
          localizeTimes(document.getElementById('reviewsContainer'));
        }

        // Reviews paginator – eyni comments kimi, reload olmadan + smooth scroll
        $(document).off('click', '.js-reviews-pager a')
                   .on('click', '.js-reviews-pager a', function(e){
          e.preventDefault();
          var url   = $(this).attr('href');
          var $wrap = $('#reviewsContainer');

          var prevHeight = $wrap.height();
          $wrap.css({ minHeight: prevHeight }).addClass('loading');

          // Smooth scroll (header offset)
          var $header = $('header.header');
          var headerH = $header.outerHeight();
          var top = Math.max(0, $wrap.offset().top - headerH*2);
          $('html, body').stop(true).animate({ scrollTop: top }, 350, 'swing');

          $wrap.load(url, function(){
            $wrap.removeClass('loading').css({ minHeight: '' });
            afterReviewsPartialLoaded();
          });
        });

        // Enable/disable düymə
        $(document).on('input change', '#addReviewForm', function(){
          const title  = ($('#reviewTitle').val() || '').trim();
          const msg    = ($('#reviewMessage').val() || '').trim();
          const rating = parseInt($('#reviewRating').val() || '0', 10);
          $('#addReviewBtn').prop('disabled', !(title.length>=3 && msg.length>=5 && rating>=1 && rating<=10));
        });

        // Submit
                $(document).on('submit', '#addReviewForm', function(e){
          e.preventDefault();
          const $btn = $('#addReviewBtn');
          const $wrap    = $('#reviewsContainer'); // NEW
          const movieId  = $wrap.data('movie-id');
          const pageSize = $wrap.data('page-size');

          const title  = ($('#reviewTitle').val() || '').trim();
          const msg    = ($('#reviewMessage').val() || '').trim();
          const rating = parseInt($('#reviewRating').val() || '0', 10);
          if (title.length<3 || msg.length<5 || rating<1 || rating>10) return;

          $btn.prop('disabled', true).text('Sending...');

          $.post('@Url.Action("Create", "Reviews")', { movieId, title, message: msg, rating })
            .done(function(){
              // 1) əvvəlcə review blokunun üstünə apar
              scrollToBlockTop($wrap);

              // 2) 1-ci səhifəni yüklə (loading state optional)
              const url = '@Url.Action("MovieReviews", "Movies")' + `?movieId=${movieId}&page=1&pageSize=${pageSize}`;
              const prevH = $wrap.height();
              $wrap.css({ minHeight: prevH }).addClass('loading');

              $wrap.load(url, function(){
                $wrap.removeClass('loading').css({ minHeight: '' });
                afterReviewsPartialLoaded();

                // 3) partial gəldikdən sonra bir daha yuxarı
                scrollToBlockTop($wrap);

                // (istəyə görə) ilk review-a fokus
                var $first = $wrap.find('.reviews__item').first();
                if ($first.length) $first.attr('tabindex','-1').focus();
              });

              // (istəyə görə) formu gizlət
              $('#addReviewForm').slideUp(200, function(){ $(this).remove(); });
            })
            .fail(function(xhr){
              if (xhr.status===401) {
                window.location='@Url.Action("Signin", "Account")'+'?returnUrl='+encodeURIComponent(location.href);
              } else {
                alert('Failed to add review.');
              }
            })
            .always(function(){ $btn.prop('disabled', false).text('SEND'); });
        });
    </script>
    <script>
        // URLs
        const commentDeleteUrl = '@Url.Action("Delete", "Comments")';
        const reviewDeleteUrl  = '@Url.Action("Delete", "Reviews")';

        // Hədəf: comment/review + id
        let deleteTarget = { type: null, id: 0 };

        // Modal başlıq/mətnini dəyişmək üçün helper
        function setDeleteModalText(type){
          const title = (type === 'review') ? 'Review delete' : 'Comment delete';
          const text  = (type === 'review')
            ? 'Are you sure to permanently delete this review?'
            : 'Are you sure to permanently delete this comment?';
          $('#modal-delete .modal__title').text(title);
          $('#modal-delete .modal__text').text(text);
        }

        // COMMENT icon klik – (səndə var idi, update edirik)
        $(document).on('click', '.js-comment-del', function(e){
          e.preventDefault();
          deleteTarget = { type: 'comment', id: parseInt($(this).data('comment-id') || '0', 10) };
          setDeleteModalText('comment');

          if ($.magnificPopup && $.magnificPopup.instance && !$.magnificPopup.instance.isOpen) {
            $.magnificPopup.open({ items: { src: '#modal-delete' }, type: 'inline' });
          }
        });

        // REVIEW icon klik – YENİ
        $(document).on('click', '.js-review-del', function(e){
          e.preventDefault();
          deleteTarget = { type: 'review', id: parseInt($(this).data('review-id') || '0', 10) };
          setDeleteModalText('review');

          if ($.magnificPopup && $.magnificPopup.instance && !$.magnificPopup.instance.isOpen) {
            $.magnificPopup.open({ items: { src: '#modal-delete' }, type: 'inline' });
          }
        });

        // Modalda Confirm (eyni düymə) – HƏR İKİSİNİ idarə edir
        $(document).on('click', '#confirmDeleteComment', function(){
          if (!deleteTarget.id || !deleteTarget.type) return;

          const $btn = $(this);
          $btn.prop('disabled', true).text('Deleting...');

          const isComment = deleteTarget.type === 'comment';

          // Mühitə görə dəyişənlər
          const delUrl     = isComment ? commentDeleteUrl : reviewDeleteUrl;
          const $wrap      = isComment ? $('#commentsContainer') : $('#reviewsContainer');
          const pagerSel   = isComment ? '.js-comments-pager'  : '.js-reviews-pager';
          const totalSpan  = isComment ? '#commentsCount'      : '#reviewsCount';
          const listUrl    = isComment ? '@Url.Action("MovieComments", "Movies")'
                                       : '@Url.Action("MovieReviews", "Movies")';

          const movieId    = $wrap.data('movie-id');
          const pageSize   = parseInt($wrap.data('page-size') || '10', 10);
          const currentPage = parseInt($wrap.find(pagerSel + ' li.active a').text() || '1', 10) || 1;
          const totalBefore = parseInt($(totalSpan).text() || '0', 10) || 0;

          $.post(delUrl, { id: deleteTarget.id })
            .done(function(){
              const nextTotal      = Math.max(0, totalBefore - 1);
              const nextTotalPages = Math.max(1, Math.ceil(nextTotal / pageSize));
              const nextPage       = Math.min(currentPage, nextTotalPages);

              const reloadUrl = `${listUrl}?movieId=${movieId}&page=${nextPage}&pageSize=${pageSize}`;
              $wrap.load(reloadUrl, function(){
                // say göstəricisini yenilə
                if (isComment)
                {
                    afterPartialLoaded();
                }
                else {
                    afterReviewsPartialLoaded();

                    if ($('#addReviewForm').length === 0) {
                      var html = $('#tpl-add-review').html(); // script template-dən götür
                      if (html) {
                        $('#reviewsContainer').after(html);
                        // başlanğıcda düyməni söndür
                        $('#addReviewBtn').prop('disabled', true);
                      }
                    }
                }
                if ($.magnificPopup) $.magnificPopup.close();

                // (istəyə görə) review silindisə, istifadəçiyə review formunu göstərmək üçün
                // bütöv #tab-2-ni serverdən yeniləmək olar. Sadəlik üçün indi yalnız list yenilənir.
              });
            })
            .fail(function(xhr){
              if (xhr.status === 401){
                window.location = '@Url.Action("Signin", "Account")' + '?returnUrl=' + encodeURIComponent(location.href);
              } else {
                alert('Failed to delete ' + (isComment ? 'comment' : 'review') + '.');
              }
            })
            .always(function(){
              $btn.prop('disabled', false).text('Delete');
              deleteTarget = { type: null, id: 0 };
            });
        });
    </script>
    <style>
        #reviewsContainer.loading {
            opacity: .6;
            pointer-events: none;
            transition: opacity .2s;
        }
    </style>
    <style>
        #commentsContainer.loading {
            opacity: .6;
            pointer-events: none;
            transition: opacity .2s;
        }
    </style>
}
